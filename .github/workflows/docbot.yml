name: CodeDoc-AI

on:
  pull_request:
    paths:
      - 'src/**'
      - '*.py'
      - '.github/workflows/**'
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - '*.py'

jobs:
  docbot:
    runs-on: ubuntu-latest
    # Skip duplicate runs for PR + push from same repo
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    
    env:
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          # Fetch enough history for git diff
          fetch-depth: 0
          # For fork PRs, ensure we can push back
          token: ${{ github.event_name == 'push' && secrets.GITHUB_TOKEN || github.token }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pypoetry
            ~/.virtualenvs
          key: poetry-${{ runner.os }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-

      - name: Install dependencies
        run: |
          pip install poetry
          poetry config virtualenvs.create false
          poetry install --no-interaction --no-ansi

      - name: Run parser tests (fail fast)
        run: |
          poetry run pytest src/codedoc_ai/parser --maxfail=1 --disable-warnings -v

      - name: Get changed files
        id: changed-files
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # Get files changed in PR
            git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.sha }} > changed_files.txt
          else
            # For push, get files changed in last commit
            git diff --name-only HEAD~1 > changed_files.txt
          fi
          
          # Filter for relevant file extensions
          grep -E '\.(py|js|java|rs|go|cpp)$' changed_files.txt > relevant_files.txt || true
          
          if [ -s relevant_files.txt ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Changed files:"
            cat relevant_files.txt
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No relevant code files changed"
          fi

      - name: Generate docs for changed files only
        if: steps.changed-files.outputs.has_changes == 'true'
        run: |
          mkdir -p docs/generated
          
          # Generate docs only for changed files
          while IFS= read -r file; do
            if [ -f "$file" ]; then
              echo "Generating docs for: $file"
              poetry run codedoc-ai generate "$file" --out "docs/generated/"
            fi
          done < relevant_files.txt

      - name: Generate file summary for PR comment
        if: github.event_name == 'pull_request' && steps.changed-files.outputs.has_changes == 'true'
        id: summary
        run: |
          # Generate concise summary of all changed files
          summary=$(while IFS= read -r file; do
            if [ -f "$file" ]; then
              poetry run codedoc-ai generate "$file" 2>/dev/null | head -2 || echo "Failed to analyze $file"
            fi
          done < relevant_files.txt | head -10)
          
          # Store in GitHub output (escape newlines)
          {
            echo "content<<EOF"
            echo "$summary"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Post/Update PR Comment
        if: github.event_name == 'pull_request' && steps.changed-files.outputs.has_changes == 'true'
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          body: |
            ## üìù CodeDoc-AI Analysis
            
            **Files analyzed:** $(wc -l < relevant_files.txt) changed
            **Generated docs:** Available in [`/docs/generated/`](./docs/generated/)
            
            ### Summary
            ```
            ${{ steps.summary.outputs.content }}
            ```
            
            ---
            <sub>ü§ñ Auto-generated by CodeDoc-AI ‚Ä¢ Updated: ${{ github.sha }}</sub>
          edit-mode: replace

      - name: Commit generated docs (main branch only)
        if: github.event_name == 'push' && steps.changed-files.outputs.has_changes == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add docs/generated/
          
          if git diff --staged --quiet; then
            echo "No documentation changes to commit"
          else
            git commit -m "üìù Auto-update docs for $(wc -l < relevant_files.txt) changed files
            
            Files: $(cat relevant_files.txt | tr '\n' ', ' | sed 's/, $//')"
            git push
          fi

      - name: Summary output
        if: always()
        run: |
          echo "::notice title=CodeDoc-AI Summary::Parser tests: ${{ job.status }}, Changed files: ${{ steps.changed-files.outputs.has_changes }}"
